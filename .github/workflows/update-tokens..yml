name: Update Token EU JSON

on:
  schedule:
    - cron: '0 */7 * * *' # Every 7 hours (UTC)
  workflow_dispatch: # Manual trigger

permissions:
  contents: write
  actions: read

jobs:
  update-tokens:
    runs-on: ubuntu-latest

    steps:
      # Checkout Likes-Application repository
      - name: Checkout Likes-api-freefire repository
        uses: actions/checkout@v4
        with:
          repository: taalai05/Likes-api-freefire
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          persist-credentials: true
          clean: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping dependency installation"
          fi

      # Check if credentials.json exists
      - name: Check for credentials file
        run: |
          if [ ! -f "credentials.json" ]; then
            echo "Error: credentials.json not found"
            exit 1
          fi

      # Validate token_bd.json
      - name: Validate token_bd.json
        run: |
          if [ -f "token_bd.json" ]; then
            jq empty token_bd.json 2>/dev/null || { echo "Error: token_bd.json is not valid JSON"; exit 1; }
          fi

      # Run token generation script
      - name: Run token generation script
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          python bot.py credentials || { echo "Error: Token generation script failed"; exit 1; }

      # Commit and push changes
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add token_bd.json
          git commit -m 'Update token_bd.json with new tokens' || echo "No changes to commit"
          git fetch origin
          git merge -X theirs origin/main || echo "Merge conflict resolved by keeping local changes"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Send Telegram notification
      - name: Notify Telegram on completion
        if: always()
        run: |
          TOKEN_COUNT=$(jq length token_bd.json 2>/dev/null || echo "Unknown")
          MESSAGE="ðŸ”” <b>Workflow Report</b>%0ARepository: <b>taalai05/Likes-api-freefire</b>%0AStatus: <b>${{ job.status }}</b>%0ATotal tokens generated: <b>$TOKEN_COUNT</b>%0ATime: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=HTML \
            -d text="$MESSAGE"
